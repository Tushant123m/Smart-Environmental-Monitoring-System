/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
/*****PIN CONNECTIONS TO
DHT11 sensor:
vcc = 5v
gnd to gnd
D0 pin to A0 

MQ135 sensor:
vcc = 5v
gng to gnd
A0 pin of sensor to A1 of stm32(Used ADC to convert to digital data)

LDR sensor:
vcc to 5v, gnd to gnd
D0 pin to A6 pin

							
MICROCONTROLLER used---stm32f401re
You can use I2C communications for LCD, that is why I have intialized it, for using it take a PC8574 expander module and do the connections accordingly 
FOR LCD CONNECTIONS:
VDD TO GND
VCC TO 5V
3RD PIN TO POTENTIOMETER(for contrast, adjust the screw of potentioometer to get contrast accordingly, else you won't see any data on LCD)
15TH and 16TH pin to VCC = 3.3V AND GND ACCORDINGLY(LED PINS)
4TH PIN TO PC0(RS)
5TH PIN TO PC1(RW)
6TH PIN TO PC2(EN)
D4 PIN TO PC3
D5 PIN TO PC4
D6 PIN TO PC5
D7 PIN TO PC10
For potentiometer connect VCC and GND to 5V and GND respectively
*****/

#include "main.h"
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <math.h>


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define RL 10.0 // Load resistance in kilo ohms
#define RZERO_CLEAN_AIR 76.63 // Example value for sensor resistance in clean air

float calibration_data[] = {0.2, 0.5, 0.8};   // Example sensor outputs corresponding to 200, 500, and 800 PPM
float ppm_values[] = {200.0, 500.0, 800.0};   // Example corresponding PPM values

/// Parameters for calculating ppm of CO2 from sensor resistance
#define PARA 116.6020682
#define PARB 2.769034857

/// Parameters to model temperature and humidity dependence
#define CORA .00035
#define CORB .02718
#define CORC 1.39538
#define CORD .0018
#define CORE -.003333333
#define CORF -.001923077
#define CORG 1.130128205


#define ATMOCO2 415.58

float rzero=76.63;
float rload=10.0;

//macros for ldr sensor
#define LDR_PIN GPIO_PIN_6
#define LDR_GPIO_PORT GPIOA
//macros and function declaration of LCD display
#define RS_PORT GPIOC
#define RS_PIN GPIO_PIN_0
#define RW_PORT GPIOC
#define RW_PIN GPIO_PIN_1
#define EN_PORT GPIOC
#define EN_PIN GPIO_PIN_2
#define D4_PORT GPIOC
#define D4_PIN GPIO_PIN_3
#define D5_PORT GPIOC
#define D5_PIN GPIO_PIN_4
#define D6_PORT GPIOC
#define D6_PIN GPIO_PIN_5
#define D7_PORT GPIOC
#define D7_PIN GPIO_PIN_10

void send_to_lcd (char data, int rs);
void lcd_send_cmd (char cmd);
void lcd_send_data (char data);
void lcd_put_cur(int row, int col);
void lcd_init (void);
void lcd_clear();
void lcd_send_string(char *str);


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart2;


I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
	void SystemClock_Config(void);
	static void MX_GPIO_Init(void);
	static void MX_GPIO1_Init(void);
	static void MX_GPIO2_Init(void);
  static void MX_I2C1_Init(void);


	static void MX_USART2_UART_Init(void);
	
	static void MX_ADC1_Init(void);
	
	/* USER CODE BEGIN PFP */
	//specific declarations for mq135 sensor
	void print_values(float CorrectionFactor , float Resistance, float CorrectedResistance, float PPM,float correctedPPM, float rZero, float correctedRZero );
	float calculate_ppm(float resistance);

	float getCorrectionFactor(float t, float h) ;
	float getResistance() ;
  float getCorrectedResistance(float t, float h);
  float getPPM();
  float getCorrectedPPM(float t, float h);
  float getRZero();
  float getCorrectedRZero(float t, float h);
	
	//specific declarations of dht11 sensor
void dht11_start(void);
uint8_t dht11_check_response(void);
uint8_t dht11_read(void);
//write 2 functions for dwt delay
		void DWT_Init(void) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable TRC
    DWT->CYCCNT = 0; // Clear the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
}

		void DWT_Delay(uint32_t us) {
    uint32_t us_count_tic =  us * (HAL_RCC_GetHCLKFreq() / 1000000);
    DWT->CYCCNT = 0U; // Clear DWT cycle counter
    while(DWT->CYCCNT < us_count_tic);
}
		



/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
//	MX_I2C1_Init();
  MX_I2C1_Init();


  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
// Variables
    float temperature = 33.0; // Assumed temperature
    float humidity = 91.0;    // Assumed humidity for mq1356 sensor
	
	 uint8_t temp, humi;
   char buffer[50];//buffer for sensding data of dht11 sensor via uart
	 
	 char b1[32];//buffer for sending data to lcd

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals and LCD*/
  MX_GPIO_Init();
	MX_GPIO1_Init();
	MX_GPIO2_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
		  lcd_init();

  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOA_CLK_ENABLE();// for dht11 sensor, we have to enable clock for precaution,though its enabled after GPIO function above

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		//start the process of fetching data from dht11 sensor by step by step timing delays and read functions
		dht11_start();
		if(dht11_check_response()){
		humi = dht11_read();
		dht11_read();  // Skip decimal part
		temp = dht11_read();  // Read temperature integer part
		dht11_read();  // Skip decimal part
		dht11_read();  // Skip checksum
		//use snprintf function for converting float values to char and storing it in buffer 
		sprintf(buffer, "Temp: %d C, Humidity: %d%%\r\n", temp, humi);
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 1000);
			//give lcd commands to send data to LCD
		lcd_put_cur(0, 0);
    sprintf(b1, "Temp: %.2f", (float)temp);
    lcd_send_string(b1);

   
    lcd_put_cur(1, 0);
    sprintf(b1, "humidity: %.2f",(float) humi);
    lcd_send_string(b1);
		HAL_Delay(2000);
		lcd_clear();
			
		}
		  //HAL_Delay(1000);

				float correctionFactor = getCorrectionFactor(temperature, humidity);
        float resistance = getResistance();
        float correctedResistance = getCorrectedResistance(temperature, humidity);
        float ppm = getPPM();
        float correctedPPM = getCorrectedPPM(temperature, humidity);
        float rZero = getRZero();
        float correctedRZero = getCorrectedRZero(temperature, humidity);

        // Print or use the values as needed
        print_values(correctionFactor,resistance,correctedResistance,ppm,correctedPPM,rZero,correctedRZero);
   
		
    lcd_put_cur(0, 0);
    sprintf(b1, "Correction: %.2f", correctionFactor);
    lcd_send_string(b1);

    // Display Resistance
    lcd_put_cur(1, 0);
    sprintf(b1, "Resistance: %.2f", resistance);
    lcd_send_string(b1);
		HAL_Delay(2000);
		lcd_clear();

    // Display Corrected Resistance
    lcd_put_cur(0, 0);
    sprintf(b1, "CorrResist: %.2f", correctedResistance);
    lcd_send_string(b1);
    HAL_Delay(2000);

    // Display PPM
    lcd_put_cur(1, 0);
    sprintf(b1, "PPM: %.2f", ppm);
    lcd_send_string(b1);
		HAL_Delay(2000);
		lcd_clear();
    // Display Corrected PPM
    lcd_put_cur(0, 0);
    sprintf(b1, "CorrPPM: %.2f", correctedPPM);
    lcd_send_string(b1);
		HAL_Delay(2000);
    // Display RZero
    lcd_put_cur(1, 0);
    sprintf(b1, "RZero: %.2f", rZero);
    lcd_send_string(b1);
		HAL_Delay(2000);
		lcd_clear();
    // Display Corrected RZero
    lcd_put_cur(0, 0);
    sprintf(b1, "CorrRZero: %.2f", correctedRZero);
    lcd_send_string(b1);
		HAL_Delay(2000);
		lcd_clear();

		
				GPIO_PinState ldrState = HAL_GPIO_ReadPin(LDR_GPIO_PORT, LDR_PIN);
        
        // Print the LDR state over UART (assuming UART is configured)
        if (ldrState == GPIO_PIN_SET)
        {
            // LDR digital output is HIGH 
            HAL_UART_Transmit(&huart2, (uint8_t*)"Darkness Detected\n", 18, HAL_MAX_DELAY);
					  lcd_put_cur(0, 0);
 
						lcd_send_string("Dark Detected");
						HAL_Delay(2000);

					
        }
        else
        {
            // LDR digital output is LOW
            HAL_UART_Transmit(&huart2, (uint8_t*)"Light Detected\n", 15, HAL_MAX_DELAY);
					  lcd_put_cur(0, 0);
 
            lcd_send_string("Light Detected");
					  HAL_Delay(2000);
					
        }
		
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */

void dht11_start(void){
	 

GPIO_InitTypeDef GPIO_InitStruct1 = {0};

	 GPIO_InitStruct1.Pin = GPIO_PIN_0;
   GPIO_InitStruct1.Mode = GPIO_MODE_OUTPUT_PP;
   GPIO_InitStruct1.Speed = GPIO_SPEED_FREQ_LOW;
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct1);
		
		//pull the pin low for 18ms
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
		HAL_Delay(18);
		
		// Pull the pin high for 20-40us
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    DWT_Delay(30);
		
		// Set pin to input
    GPIO_InitStruct1.Pin = GPIO_PIN_0;
    GPIO_InitStruct1.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct1);
}

uint8_t dht11_check_response(void){
uint8_t response = 0;
	
	  // Wait for 40us
   // DWT_Delay(40);

    // Check if the pin is low
    if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
        // Wait for 80us
        DWT_Delay(80);

        // Check if the pin is high
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
            response = 1;
        }

        // Wait for the pin to go low again
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
    }

    return response;
}

uint8_t dht11_read(void) {
    uint8_t value = 0;
    for (int i = 0; i < 8; i++) {
        // Wait for the pin to go high
        while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));

        // Delay for 40us
        DWT_Delay(40);

        // Read the bit
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
            value |= (1 << (7 - i));  // If the pin is high, the bit is 1
        }

        // Wait for the pin to go low again
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
    }
    return value;
}


void print_values(float CorrectionFactor, float Resistance, float CorrectedResistance, float PPM, float correctedPPM, float rZero, float correctedRZero) {
    char buffer[200];
    int length = snprintf(buffer, sizeof(buffer), 
                          "Correction Factor: %.2f, Resistance: %.2f, Corrected Resistance: %.2f, PPM: %.2f, correctedPPM: %.2f, rZero: %.2f, correctedRZero: %.2f\n",
                          CorrectionFactor, Resistance, CorrectedResistance, PPM, correctedPPM, rZero, correctedRZero);
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, length, HAL_MAX_DELAY);
}

float getCorrectionFactor(float t, float h) {
    // Linearization of the temperature dependency curve under and above 20 degree C
    if(t < 20) {
        return CORA * t * t - CORB * t + CORC - (h - 33.0) * CORD;
    } else {
        return CORE * t + CORF * h + CORG;
    }
}

float getResistance() {
    uint32_t val;
    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    val = HAL_ADC_GetValue(&hadc1);
    HAL_ADC_Stop(&hadc1);
    return ((1023.0 / (float)val) - 1.0) * rload;
}

float getCorrectedResistance(float t, float h) {
    return getResistance() / getCorrectionFactor(t, h);
}

float getPPM() {
    return PARA * pow((getResistance() / rzero), -PARB);
}

float getCorrectedPPM(float t, float h) {
    return PARA * pow((getCorrectedResistance(t, h) / rzero), -PARB);
}

float getRZero() {
    return getResistance() * pow((ATMOCO2 / PARA), (1.0 / PARB));
}

float getCorrectedRZero(float t, float h) {
    return getCorrectedResistance(t, h) * pow((ATMOCO2 / PARA), (1.0 / PARB));
}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct2 = {0};

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
	 
	
    GPIO_InitStruct2.Pin = LDR_PIN;
    GPIO_InitStruct2.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct2.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(LDR_GPIO_PORT, &GPIO_InitStruct2);
	
/* USER CODE END MX_GPIO_Init_2 */
}

static void MX_GPIO1_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
/* USER CODE END MX_GPIO_Init_2 */
}

static void MX_GPIO2_Init(void){
 // Enable the GPIO clocks for the I2C pins
    __HAL_RCC_GPIOB_CLK_ENABLE(); // Assuming I2C1 is on GPIOB (you might need to change this based on your specific STM32 and pin configuration)

    GPIO_InitTypeDef GPIO_InitStruct3 = {0};

    // Configure I2C SCL Pin
    GPIO_InitStruct3.Pin = GPIO_PIN_6; // Assuming SCL is on PB6 (you might need to change this based on your specific STM32 and pin configuration)
    GPIO_InitStruct3.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct3.Pull = GPIO_PULLUP;
    GPIO_InitStruct3.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct3.Alternate = GPIO_AF4_I2C1; // Assuming AF4 for I2C1 (you might need to change this based on your specific STM32 and pin configuration)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct3);

    // Configure I2C SDA Pin
    GPIO_InitStruct3.Pin = GPIO_PIN_7; // Assuming SDA is on PB7 (you might need to change this based on your specific STM32 and pin configuration)
    GPIO_InitStruct3.Alternate = GPIO_AF4_I2C1; // Assuming AF4 for I2C1 (you might need to change this based on your specific STM32 and pin configuration)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct3);

}


static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

void send_to_lcd (char data, int rs)
{
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, rs);  // rs = 1 for data, rs=0 for command
    /* write the data to the respective pin */
    HAL_GPIO_WritePin(GPIOC , GPIO_PIN_10, ((data>>3)&0x01));
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, ((data>>2)&0x01));
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, ((data>>1)&0x01));
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, ((data>>0)&0x01));
    /* Toggle EN PIN to send the data
     * if the HCLK > 100 MHz, use the  20 us delay
     * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
     */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 DWT_Delay (20);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
  DWT_Delay (20);
}

void lcd_send_cmd (char cmd)
{
    char datatosend;
    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
    send_to_lcd(datatosend,0);  // RS must be while sending command
    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
    send_to_lcd(datatosend, 0);
}

void lcd_send_data (char data)
{
    char datatosend;
   
    /* send higher nibble */
    datatosend = ((data >> 4) & 0x0F);
    send_to_lcd(datatosend, 1);  // rs = 1 for sending data

    /* send Lower nibble */
    datatosend = (data & 0x0F);
    send_to_lcd(datatosend, 1);
}


void lcd_put_cur(int row, int col)
{
    switch (row)
    {
        case 0:
            col |= 0x80;
            break;
        case 1:
            col |= 0xC0;
            break;
    }
    lcd_send_cmd (col);
}

void lcd_send_string(char *str)
{
    while (*str)
    {
        lcd_send_data(*str++);
    }
}

void lcd_init (void)
{
	
	   // Enable the clock for GPIOD
    __HAL_RCC_GPIOC_CLK_ENABLE();
	GPIO_InitTypeDef GPIO_InitStruct5 = {0};

 

    // Configure GPIO pins 0 to 7 as output
    GPIO_InitStruct5.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | 
                          GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
    GPIO_InitStruct5.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct5.Pull = GPIO_NOPULL;
    GPIO_InitStruct5.Speed = GPIO_SPEED_FREQ_LOW;
    
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct5);

    // Reset all pins to low initially
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | 
                             GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10, GPIO_PIN_RESET);
	
	
	
    // 4 bit initialisation
    HAL_Delay(50);  // wait for >40ms
    lcd_send_cmd (0x30);
    HAL_Delay(5);  // wait for >4.1ms
    lcd_send_cmd (0x30);
    HAL_Delay(1);  // wait for >100us
    lcd_send_cmd (0x30);
    HAL_Delay(10);
    lcd_send_cmd (0x20);  // 4bit mode
    HAL_Delay(10);

  // dislay initialisation
    lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
    HAL_Delay(1);
    lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
    HAL_Delay(1);
    lcd_send_cmd (0x01);  // clear display
    HAL_Delay(1);
    HAL_Delay(1);
    lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
    HAL_Delay(1);
    lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
void lcd_clear(void)
{
    // Send the clear display command (0x01)
    send_to_lcd(0x01 >> 4, 0);  // Higher nibble of 0x01 (command mode)
    send_to_lcd(0x01 & 0x0F, 0);  // Lower nibble of 0x01 (command mode)
    
    HAL_Delay(2);  // Wait for the command to execute
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}



// Function to send command to LCD




#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
